name: validate

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}

jobs:
  validate:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]

    steps:
      - name: checkout self
        uses: actions/checkout@v4

      - name: RageAgainstThePixel/upm-config
        uses: ./
        with:
          registry_url: ${{ secrets.UPM_REGISTRY_URL }}
          auth_token: ${{ secrets.UPM_AUTH_TOKEN }}

      - run: |
          # macOS and Linux '~/.upmconfig.toml'
          # winodows '%USERPROFILE%\.upmconfig.toml'

          if ($env:OS -eq "Windows_NT") {
            $upmconfig = "$env:USERPROFILE\.upmconfig.toml"
          } else {
            $upmconfig = "$env:HOME/.upmconfig.toml"
          }

          Write-Host "Checking for upmconfig at $upmconfig"

          if (-not (Test-Path $upmconfig)) {
            Write-Host ".upmconfig.toml does not exist"
            exit 1
          }

          # delete it
          Remove-Item $upmconfig
        shell: pwsh

      - name: RageAgainstThePixel/upm-config
        uses: ./
        with:
          registry_url: ${{ secrets.UPM_REGISTRY_URL }}
          username: ${{ secrets.UPM_USERNAME }}
          password: ${{ secrets.UPM_PASSWORD }}

      - run: |
          # macOS and Linux '~/.upmconfig.toml'
          # winodows '%USERPROFILE%\.upmconfig.toml'

          if ($env:OS -eq "Windows_NT") {
            $upmconfig = "$env:USERPROFILE\.upmconfig.toml"
          } else {
            $upmconfig = "$env:HOME/.upmconfig.toml"
          }

          Write-Host "Checking for upmconfig at $upmconfig"

          if (-not (Test-Path $upmconfig)) {
            Write-Host ".upmconfig.toml does not exist"
            exit 1
          }

          # delete it
          Remove-Item $upmconfig
        shell: pwsh
